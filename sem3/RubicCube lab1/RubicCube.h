#pragma once
#include <iostream>
#include <string>
#include <fstream>
#include "C:\Users\Максим\source\repos\RubicCube\RubicCube\RubicCubeGraphic.h"

/*!
\file
\brief Заголовочный файл c описанием класса 

Файл содержит в себе объявления методов класса RubicCube, необходимых
для реализации функционала и логики игры.
*/

/*!
	\brief Лабораторная работа №1: Класс, реализующий игру-головоломку "Кубик Рубика"

	\author Семенидо Максим, гр.321702
	\date 15.09.2024
	\version 1.0

	Класс содержит методы для реализации следующих возможностей:
	- Случайное размещение цветов;
	- Загрузка начального размещения цветов из файла;
	- Поворот грани кубика;
	- Проверка правильной расстановки клеток;
	- Перегрузки операторов: =, !=, ==.

	В рамках данной лабораторной работы класс предназначен для реализации
	игры-головоломки "Кубик-Рубик" со всем необходимым функционалом для игры,
	консольным меню и простым интерфейсом. 

	\warning Данный класс создан в рамках лабораторной работы №1,
	по курсу учебной дисциплины ППОИС!
*/

class RubicCube {
private:

	char Cube[6][3][3];///< Инициализация представления объекта класса

	/*!
Выполняет случайную правильную раскраску кубика (через случайные вращения собранного)
*/
	void Colorize();


	/*!
Перегрузка оператора потокового вывода (не член класса)
\param stream - Поток вывода
\param cube - Объект вывода
Код функции выглядит следующим образом:
\code 
ostream& operator << (ostream& stream, const RubicCube& cube) {
	for (int face = 0; face < 6; face++) {
		stream << "\t\t\t Грань " << face + 1 << endl;
		for (int row = 0; row < 3; row++) {
			stream << "\t\t\t";
			for (int col = 0; col < 3; col++) {
				stream << cube.Cube[face][row][col] << "  ";
			}
			stream << endl;
		}
		stream << endl << endl;
	}
	return stream;
}
\endcode
*/
	friend ostream& operator << (ostream& stream, const RubicCube& cube);

	/*!
Выполняет поворот указанной грани по часовой стрелке
\param - FaceNumber Номер вращаемой грани
*/
	void RotateFace(int FaceNumber);

	/*!
Выполняет поворот соседних элементов к передней грани по часовой стрелке
*/
	void RotateNearFrontFace();

	/*!
Выполняет поворот соседних элементов к левой грани по часовой стрелке
*/
	void RotateNearLeftFace();

	/*!
Выполняет поворот соседних элементов к правой грани по часовой стрелке
*/
	void RotateNearRightFace();

	/*!
Выполняет поворот соседних элементов к верхней грани по часовой стрелке
*/
	void RotateNearUpFace();

	/*!
Выполняет поворот соседних элементов к нижней грани по часовой стрелке
*/
	void RotateNearDownFace();

	/*!
Выполняет поворот соседних элементов к задней грани по часовой стрелке
*/
	void RotateNearBackFace();

	/*!
Проверяет правильность окраски центров кубика
\return True либо False (1 или 0) в зависимости от правильности цветов центров
*/
	bool CheckCentresColoring();

	/*!
Проверяет правильность количества окрашенных углов кубика
\return True либо False (1 или 0) в зависимости от правильности
количества окрашенных в определённый цвет углов
*/
	bool CheckCornersColoringCount();

	/*!
Проверяет правильность количества окрашенных рёбер кубика
\return True либо False (1 или 0) в зависимости от правильности
количества окрашенных в определённый цвет рёбер
*/
	bool CheckEdgesColoringCount();

	/*!
Проверяет правильность окраски углов кубика
\return True либо False (1 или 0) в зависимости от правильности окраски углов
*/
	bool CheckNearCornersColoring();

	/*!
Проверяет правильность окраски рёбер кубика
\return True либо False (1 или 0) в зависимости от правильности окраски рёбер
*/
	bool CheckNearEdgesColoring();

public:

	/*!
Производит указанное число вращений случайных граней кубика (перемешивание)
\param rotation_num - Число вращений
*/
	void RandomRotation(int rotation_num);

	/*!
Выполняет поворот указанной грани кубика вместе с прилегающими элементами
\param FaceNumber - Номер грани
*/
	void RotateCubeFace(int FaceNumber);

	/*!
Проверяет правильность окраски всего кубика
\return True либо False (1 или 0) в зависимости от правильности окраски кубика
*/
	bool CheckColoring();

	/*!
Перегрузка оператора равенства для класса RubicCube
\param Cube - Ссылка на объект класса RubicCube, с которым происходит сравнение
\return True либо False (1 или 0) в зависимости от соответствия объектов
*/
	bool operator == (const RubicCube& Cube);

	/*!
Перегрузка оператора неравенства для класса RubicCube
\param Cube - Ссылка на объект класса RubicCube, с которым происходит сравнение
\return True либо False (1 или 0) в зависимости от несоответствия объектов
*/
	bool operator != (const RubicCube& Cube);

	/*!
Перегрузка оператора присваивания для класса RubicCube
\param Cube - Ссылка на объект класса RubicCube, от которого происходит присваивание
\return Ссылка на исходный объект с обновлёнными параметрами
*/
	RubicCube& operator = (const RubicCube& counter);


	/*!
Конструктор класса, выполняющий случайное перемешивание граней кубика
в соответствии с указанным значением
\param rotation_num - Число вращений
*/
	RubicCube(int rotation_num);

	/*!
Конструктор класса, выполняющий считывание окраски кубика из txt-файла
\param filename - Имя файала
*/
	RubicCube(const string& filename);

	/*!
Реализует логику меню для игры
*/
	void CubeGameMenu();

	/*!
Выводит сообщение о правильном или неправильном окрасе кубика
*/
	void ColoringCheckMessage();

	/*!
Реализует опцию выхода из игры
\result True либо False (1 или 0) в зависимости от выбора игрока
*/
	bool ExitGame();

	/*!
Реализует логику выбора окраски кубика
\param Cube - Ссылка на кубик, который будет окрашен
\result Сссылка на окрашенный кубик
*/
	RubicCube CubeChoiceMenu(RubicCube& Cube);

	/*!
Выводит окраску всего кубика в консоль
*/
	void SeeCube();
};

